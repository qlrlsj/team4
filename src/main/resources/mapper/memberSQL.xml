<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="member">
		<!-- select id="DAO에서 보내준 메소드명과 동일하다" -->
	<!-- parameterType="패키지 경로를 전부 적어주어야 구분이 가능하다 mapper로 들어온 값을 의미한다" (Mybatis에서는 파라미터타입을 한개만 가능하다) -->
	<!-- resultType="mapper에서 나가는 값을 의미한다" -->
	<!-- <select id="selectOneMember" parameterType="kr.or.member.model.vo.Member" resultType="kr.or.member.model.vo.Member"></select> -->
	
	<select id="selectOneMember" parameterType="m" resultType="m"> <!-- 위와 동일하나, mybatis-config.xml에서 별칭을 지정했다 m으로 사용하기로 -->
		select
			member_no as memberNo, <!-- 쿼리를 이렇게 치는 이유 실제 테이블 컬럼명과 VO 변수명을 동일하게 맞춰주면 Mybatis에서는 자동으로 Member 객체로 묶어준다 -->
			member_id as memberId,
			member_pw as memberPw,
			member_name as memberName,
			member_level as memberLevel,
			member_grade as memberGrade,
			member_phone as memberPhone,
			member_email as memberEmail,
			enroll_date as enrollDate,
			member_point as memberPoint,
			member_intro as memberIntro
		from member where member_id=#{memberId} <!-- #을쓰고 {}를 사용하면 파라미터를 사용하겠다는걸로 Mybatis가 인지한다 -->
		<if test="memberPw != null"> <!-- 동적쿼리 : 비밀번호가 null이 아닐때에는(비밀번호를 조회해야 될 때에는 아래 쿼리도 실행한다 -->
		and member_pw=#{memberPw} 
		</if>
	</select>
		<select id="selectOneMember1" parameterType="m" resultType="m"> <!-- 위와 동일하나, mybatis-config.xml에서 별칭을 지정했다 m으로 사용하기로 -->
		select
			member_no as memberNo, <!-- 쿼리를 이렇게 치는 이유 실제 테이블 컬럼명과 VO 변수명을 동일하게 맞춰주면 Mybatis에서는 자동으로 Member 객체로 묶어준다 -->
			member_id as memberId,
			member_pw as memberPw,
			member_name as memberName,
			member_level as memberLevel,
			member_grade as memberGrade,
			member_phone as memberPhone,
			member_email as memberEmail,
			enroll_date as enrollDate,
			member_point as memberPoint,
			member_intro as memberIntro
		from member where member_id=#{memberId} <!-- #을쓰고 {}를 사용하면 파라미터를 사용하겠다는걸로 Mybatis가 인지한다 -->
	</select>
	
	<insert id="insertMember" parameterType="m"><!-- insert,updqte,delete의 경우 어차피 정수(int)가 나가기 때문에 resultType이 필요가 없다 -->
		insert into member values(member_seq.nextval,#{memberId},#{memberPw},#{memberName},#{memberLevel},#{memberGrade},#{memberPhone},#{memberEmail},sysdate,#{memberPoint},#{memberIntro})
	</insert>
	
	<update id="updateOneMember" parameterType="m">
		update member set member_Pw=#{memberPw}, member_Name=#{memberName}, member_Phone=#{memberPhone}, member_Email=#{memberEmail}, member_Intro=#{memberIntro} where member_no=#{memberNo}
	</update>
	
	<select id="selectAllMember" resultType="m">
		select
			member_no as memberNo,
			member_id as memberId,
			member_name as memberName,
			member_level as memberLevel,
			member_grade as memberGrade,
			member_phone as memberPhone,
			member_email as memberEmail,
			enroll_date as enrollDate,
			member_point as memberPoint,
			member_intro as memberIntro
		from member
	</select>
	
	<delete id="deleteOneMember" parameterType="int">
		delete member where member_no=#{memberNo}
	</delete>
	
	<update id="updateMemberPoint" parameterType="Map">
		update member set member_point = member_point + #{updatePoint} where member_no=#{memberNo}
	</update>
	
	<update id="changeGrade" parameterType="map">
		update member set member_grade = #{memberGrade} where member_no=#{memberNo}
	</update>
	
<!-- 	<update id="checkedChangeLevel" parameterType="map"> -->
<!-- 		update member set  -->
<!-- 			member_grade =  -->
			
<!-- 	</update> -->
	
<!-- 	<update id="updateMember" parameterType="m"> -->
<!-- 		update member_tbl set phone=#{phone}, email=#{email} where member_no=#{memberNo} -->
<!-- 	</update> -->
		<select id="selectReserveListH" parameterType="m" resultType="rd">
		select
			TO_CHAR(hr.reservation_date, 'YYYY/MM/DD')as reserveDate,
			ho.hostel_code as productNo,
			hr.reservation_no as reserveNo,
			h.hostel_name as reserveName,
			hr.reserve_name as memberId,
			hr.reserve_phone as memberPhone,
			h.member_no as sellerNo,
			ho.option_no as optionNo,
			ho.room_option as option1,
			hr.reserve_num as option2,
			hr.hostel_indate as option3,
			hr.hostel_outdate as option4,
			ho.hostel_price as reservePrice,
			pay.pay_no as payNo
		from hostel_option ho
		join hostel_reserve hr on(ho.option_no = hr.option_no)
		join hostel h on(ho.hostel_code = h.hostel_code)
		join payment pay on(hr.pay_no = pay.pay_no)
		where hr.member_no = #{memberNo}
		ORDER BY reserveDate DESC
	</select>
	<select id="selectReserveListT" parameterType="m" resultType="rd">
		select
			TO_CHAR(pay.pay_date, 'YYYY/MM/DD')as reserveDate,
			t.ticket_no as productNo,
			tr.reserve_no as reserveNo,
			t.ticket_title  as reserveName,
			tr.reserve_name as memberId,
			tr.reserve_phone as memberPhone,
			t.member_no as sellerNo,
			or1.opt_no as optionNo,
			or1.opt_quantity as option1,
			to1.opt_price as reservePrice,
			pay.pay_no as payNo
		from ticket t
		join ticket_reserve tr on (t.ticket_no = tr.ticket_no)
		join option_reserve or1 on (tr.reserve_no = or1.reserve_no)
		join ticket_option to1 on (or1.opt_no = to1.opt_no)
		join payment pay on (tr.pay_no = pay.pay_no)
		where tr.member_no = #{memberNo}
		ORDER BY reserveDate DESC
	</select>
	<select id="selectReserveListP" parameterType="m" resultType="rd">
		select
			TO_CHAR(pay.pay_date, 'YYYY/MM/DD')as reserveDate,
			p.package_no as productNo,
			pr.reserve_no as reserveNo,
			p.package_title as reserveName,
			m.member_id as memberId,
			m.member_phone as memberPhone,
			p.member_id as option1,
			pr.package_prsnl as option2,
			p.package_price as reservePrice,
			pay.pay_no as payNo
		from package p
		join package_reserve pr on(p.package_no = pr.package_no)
		join member m on (pr.member_id = m.member_id)
		join payment pay on(pr.pay_no = pay.pay_no)
		where pr.member_id = #{memberId}
		ORDER BY reserveDate DESC
	</select>
	<select id="selectBlack" resultType="rp">
	select
		r.reporter as reporter
		m1.member_id as reporterId
		r.reported as reported
		m2.member_id as reportedId
		r.report_content as reportContent
	from report r
	join member m1 on (r.reporter = m1.member_no)
	join member m2 on (r.reported = m2.member_no)
	</select>
	
</mapper>
